Suppose, we have a method like this:

double getPiValue() {
    return 3.1415;
}
We can write this method using lambda expression as:

int pi = () -> 3.1415




//Lambda Expression
- A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.

- Lambda expression is, essentially, an anonymous or unnamed method. The lambda expression does not execute on its own. Instead, it is used to implement a method defined by a functional interface.

syntax:
	parameter -> expression 		: 	Single parameter and an expression
	(parameter1, parameter2) -> expression	:	using multiple parameters, wrap them in parentheses

Note:
- Expressions are limited. They have to immediately return a value, and they cannot contain variables, assignments or statements such as if or for. 


ex.
	public static void main(String[] args) {
    	   ArrayList<Integer> numbers = new ArrayList<Integer>();
    	   numbers.add(5);
    	   numbers.add(9);
    	   numbers.add(8);
    	   numbers.add(1);
    	   numbers.forEach( (n) -> { System.out.println(n); } );
  	}


//Lambda Expression having a code block
syntax:
	(parameter1, parameter2) -> { 
		code block...
		return
	}

- In order to do more complex operations, a code block can be used with curly braces. If the lambda expression needs to return a value, then the code block should have a return statement.

ex.
	() -> {
    		double pi = 3.1415;
    		return pi;
	};
